"""
    Декораторы:
    Пример 7.1. Декоратор обычно заменяет одну функцию другой
    Пример 7.2. Модуль registration.py
    Пример 7.3. Список promos заполняется декоратором promotion (promotion.py)
    Пример 7.4. Функция, читающая локальную и глобальную переменную
    Пример 7.5. Переменная b локальна, потому что ей присваивается значение
                в теле функции
    Замыкание:
    average_oo.py
    Пример 7.8.  average_oo.py: класс для вычисления накопительного среднего
    Пример 7.9.  average.py: функция высшего порядка для вычисления
                 накопительного среднего
    Пример 7.10. Тестирование функции из примера 7.9
    Пример 7.11. Инспекция функции, созданной функцией make_averager из
                 примера 7.9
    Пример 7.12. Продолжение примера 7.10

    Объявление nonlocal
    average_oo.py
    Пример 7.13. Неправильная функция высшего порядка для вычисления накопительного
                 среднего без хранения всей истории
    Пример 7.14. Вычисление накопительного среднего без хранения всей истории
                 (исправленный вариант с nonlocal)

    clockdeco_demo.py
    Пример 7.15. Простой декоратор для вывода времени выполнения функции
    Пример 7.16. Использование декоратора clock

    clockdeco2.py
    Пример 7.17. Улучшенный декоратор clock

    fibo_demo.py
    Пример 7.18. Очень накладный рекурсивный способ вычисления
                 n-ого числа Фибоначчи
    Пример 7.19. Более быстрая реализация с использованием кэширования


    single_dispatch.py
    Пример 7.21. Декоратор singledispatch создает функцию htmlize.register
                 для объединения нескольких функций в одну обобщенную

    registration_param.py
    Пример 7.23. Чтобы декоратор мог принимать параметры, его следует вызывать
                  как функцию

    clockdeco_param.py
    Пример 7.25. Модуль clockdeco_param.py: параметризованный декоратор clock


    Пример 7.26. clockdeco_param_demo1.py


"""


# Пример 7.1.
def deco(func):
    def inner():
        print('running inner()')
    return inner


@deco
def target():
    print('running target()')


# Пример 7.4
def f1(a):
    print(a)
    print(b)


print(f1(3))  # will be an error


# Пример 7.5. Переменная b локальна, потому что ей присваивается
# значение в теле функции
b = 6


def f2(a):
    print(a)
    print(b)
    b = 9


print(f2(3))  # wil be an error


def f3(a):
    global b
    print(a)
    print(b)
    b = 9
    print(b)




