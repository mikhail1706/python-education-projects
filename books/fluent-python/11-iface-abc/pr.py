"""
    ГЛАВА 11. Интерфейсы: от протоколов до абстрактных базовых классов

    Пр имер 11.1. vector2d_v0.py: x и y – открытые атрибуты (повторение примера 9.2)
    Пример 11.2. vector2d_v3.py: x и y преобразованы в свойства (полный код
                см. в примере 9.9)
    Пример 11.3. Частичная реализация протокола последовательности: метода __getitem__
            достаточно для доступа к элементам, итерирования и реализации оператора in
    Пример 11.4. Колода карт как последовательность (повторение примера 1.1)
    Пример 11.6. Партизанское латание класса FrenchDeck с целью сделать его изменяемым
           и совместимым с функцией random.shuffle (продолжение примера 11.5)
    Пример 11.7. Применение динамической типизации для обработки строки или
          итерируемого объекта, содержащего строки
    Пример 11.8. frenchdeck2.py: FrenchDeck2, подкласс collections.MutableSequence

    Пример 11.9. tombola.py: Tombola – ABC с двумя абстрактными и двумя конкретными
            методами
    Пример 11.10. Часть иерархии классов Exception
    Пример 11.11. Непригодная реализация Tombola не останется незамеченной
    Пример 11.12. bingo.py: BingoCage – конкретный подкласс Tombola
    Пример 11.13. lotto.py: LotteryBlower – конкретный подкласс, в котором
                  переопределены методы inspect и loaded ABC Tombola
    Пример 11.14. tombolist.py: TomboList – виртуальный подкласс Tombola

    Виртуальный подкласс Tombola
"""
fib1 = 1
fib2 = 10

arr = [1, 2, 3, 5]

print(fib1)
print(fib2)


# Пример 11.7. Применение динамической типизации для обработки строки или
# итерируемого объекта, содержащего строки
field_names = ''

try:
    field_names = field_names.replace(',', ' ').split()
except AttributeError:
    pass

field_names = tuple(field_names)